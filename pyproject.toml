[project]
name = "graddnodi"
version = "1.1.0pre"
requires-python = ">=3.9"
description = "Perform collocation studies, testing a wide range of calibration methods"
authors = [
	{name="Idris Hayward", email="CaderIdrisGH@outlook.com"}
]
license = { file = "LICENSE" }
classifiers = [
	"Programming Language :: Python :: 3",
	"Programming Language :: Python :: 3 :: Only",
	"Operating System :: OS Independent"
]
readme = "README.md"
keywords = ["calibration", "errors", "graphs", "collocation"]
dependencies = [
]

[build-system]
requires = ["setuptools>=42.0", "wheel"]
build-backend = "setuptools.build_meta"

[project.scripts]
graddnodi = "graddnodi.graddnodi:main_cli"

[tool.flake8]
exclude = "docs"

[tool.pytest.ini_options]
testpaths = [
	"tests"
]

markers = [
]

addopts = [
	"--html=reports/tests/index.html",
	"--self-contained-html"
]

[tool.mypy]
mypy_path = "src"
check_untyped_defs = true
disallow_any_generics = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.tox]
legacy_tox_ini = """
	[tox]
	minversion = 4.0
	envlist = py39, py311, flake8, mypy
	isolated_build = true

	[gh-actions]
	python =
		3.9: py39
		3.11: py311, mypy, flake8

	[testenv]
	setenv =
		PYTHONPATH = {toxinidir}
	deps =
		-r{toxinidir}/requirements.txt
	commands =
		pytest --basetemp={envtmpdir}

	[testenv:flake8]
	basepython = python3.11
	deps = -r requirements.txt
	commands = flake8 src tests

	[testenv:mypy]
	basepython = python3.11
	deps = -r requirements.txt
	commands = mypy src
"""

[tool.pyright]
venvPath = ""
venv = ".venv"

[tool.ruff]
extend-include = ["*.ipynb"]
line-length = 79
indent-width = 4

[tool.ruff.lint]
select = [
	"F",  # pyflakes: General
	"E",  # pycodestyle: General errors
	"W",  # pycodestyle: General warnings
	"C90",  # mccabe: Name complexity
	"N",  # pep8-naming: Use proper names
	"D",  # pydocstyle: Docstring linting
	"UP",  # pyupgrade:  Don't use old code standards
	"YTT",  # flake8-2020: Extra flake8 rules
	"ANN",  # flake8-annotations: Used for type hinting
	"S",  # flake8-bandit: Security linting
	"BLE",  # flake8-blind-except: Don't accept raw exceptions
	"FBT",  # flake8-boolean-trap: Avoid the boolean trap
	"B",  # flake8-bugbear: Useful hints
	"A",  # flake8-builtins: Don't use keywords reserved by Python
	"C4",  # flake8-comprehensions: Useful hints about comprehensions
	"EM",  # flake8-errmsg: Useful hints when raising exceptions
	"ISC",  # flake8-implicit-str-concat: Warns against bad string concatenation 
	"ICN",  # flake8-import-conventions: Use common import names
	"G",  # flake8-logging-format: Format logging calls properly
	"PIE",  # flake8-pie: misc lints
	"T20",  # flake8-print: No print statements, use logging!
	"PT",  # flake8-pytest-style: Lint pytest files
	"Q",  # flake8-quotes: Quote linting
	"RET",  # flake8-return: Lint return values from functions
	"SLF",  # flake8-self: Don't use a classes private member
	"SIM",  # flake8-simplify: Simplify your code to make it more readable
	"TCH",  # flake8-type-checking: Remove overhead from type checking
	"ARG",  # flake8-unused-arguments: Check for unused arguments
	"PTH",  # flake8-use-pathlib: Use pathlib wherever possible!
	"PD",  # pandas-vet: Pandas specific linting
	"PGH",  # pygrep-hooks: Don't allow coverall noqa ignore comments
	"TRY",  # tryceratops: Lint try-except blocks
	"NPY",  # Numpy-specific-rules: Numpy linting
	"PERF",  # perflint: Improve performance
	"LOG",  # flake8-logging: Logging specific linting
	"RUF",  # Ruff-specific-rules: Extra rules
]

ignore = [
	"D203",
	"D212",
	"Q000",
	"Q001"
]
	
exclude = [
    "__pycache__",
    "env",
    ".env",
    "venv",
    ".venv",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
]
